body {
	color: aliceblue;
	font-family: sans-serif;
	background-color: #121418;
}

* {
	font-family: 'Beleren Bold';
}

/*
CSS Positioning
The FLOAT and POSITION properties allow us to modify the natural position of any element in the HTML document
The browser places each element considering the order in which it appears in the document and its display type depending on whether it is an inline or block element
FLOAT and POSITION allow us to modify this behavior

Floating Elements:
- float: Turns an element into a floating element, shifting it to the far left or far right of its original position
- clear: Clears the float (left, right, both)

Types of Positioning:
- static (default)
- relative
- absolute
- fixed
- sticky

To move positioned elements, the following properties are activated:
- top (vertical - Y-axis)
- bottom (vertical - Y-axis)
- left (horizontal - X-axis)
- right (horizontal - X-axis)
- z-index (depth - Z-axis)

The top and left properties take precedence over bottom and right, respectively
These 5 properties do not work with the static value
*/

/*
static: This is the default value, it means that the element respects the flow of the HTML document, so it cannot be moved or positioned
*/

.static {
	background-color: cornflowerblue;
	position: static;
	top: 10px;
	left: 10px;
}

/* 
relative: The element keeps its original dimensions and position in the document flow
If it is moved it takes as reference its original position
*/

.relative {
	background-color: cadetblue;
	position: relative;
	width: 300px;
	top: 80px;
	left: 50px;
}

/*
absolute: The element loses its original dimensions and position in the document flow
If it is moved it can take as reference 2 elements:
  1) The first ancestor with relative positioning
  2) If it does not find a relative ancestor, it moves with respect to the HTML document
*/

.absolute {
	background-color: tomato;
	position: absolute;
	top: 140px;
	left: 100px;
}

.relative-parent {
	background-color: crimson;
	position: relative;
	width: 300px;
	height: 40px;
}

.absolute-child {
	background-color: black;
	position: absolute;
	left: 0;
	top: 10px;
}

/*
fixed: The element loses its original dimensions and position in the flow of the document
If it moves it takes as reference the HTML document and remains fixed in the position, when the scroll is moved, the element will not move, it remains FIXED
*/

.fixed {
	background-color: darkolivegreen;
	position: fixed;
	width: 100px;
	top: 80px;
	right: 0;
}

/*
sticky: Is a combination of relative and fixed positioning, for this positioning the properties of top, left, bottom and right do not move the element,
they serve as a reference point, while they do not reach that value the element behaves as relative, when it reaches it becomes fixed
For this behavior to work the sticky element must be a direct child of the body or its container element must have defined dimensions,
and will only be sticky within the dimensions of its parent container
*/

.sticky {
	background-color: darkslateblue;
	position: sticky;
	width: 200px;
	top: 235px;
}

.sticky-parent {
	border: medium dashed white;
	width: 300px;
	height: 300px;
}

.sticky-child {
	background-color: lightslategray;
	position: sticky;
	top: 255px;
}

/*
z-index: Property that allows to control the depth of the positioned elements,
its default value is auto, it accepts positive, negative and zero numbers
The higher the value the element is more to the front, the lower the value the more to the back
A parent element can never be on top of its child elements,
however the child elements can by giving them a negative value and that the parent element has no z-index value defined
*/

.z-index-1,
.z-index-2 {
	background-color: darkslategray;
	border: thin solid white;
	position: relative;
	width: 200px;
	height: 100px;
	margin-top: 10px;
}

.z-index-1 {
	z-index: 1;
}

.z-index-2 {
	top: -70px;
	left: 50px;
	z-index: 2;
}

.z-index-parent {
	background-color: firebrick;
	width: 200px;
	height: 200px;
	position: relative;
	/* z-index: 2; */
	/* It does not work to give a higher z-index to position the parent element ahead of the child element */
}

.z-index-child {
	background-color: black;
	position: relative;
	width: 150px;
	height: 60px;
	top: -30px;
	left: 70px;
	z-index: -1;
	/* However, it is possible to place the child element after the parent element by setting a negative z-index value */
}
