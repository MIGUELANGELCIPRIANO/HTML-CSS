html {
	box-sizing: border-box;
	font-family: sans-serif;
	color: white;
	background-color: #121418;
}

*,
*::after,
*::before {
	box-sizing: inherit;
	font-family: 'Beleren Bold';
}

a {
	color: indianred;
}

.box {
	margin: 5rem auto;
	border: thick double #121418;
	width: 300px;
	height: 300px;
}

.card {
	margin: 2rem auto;
	border: thin solid;
	width: 700px;
	height: 400px;
}

.card img {
	width: 100%;
	height: 100%;
	object-fit: cover;
	object-position: 0 50%;
}

/*
TRANSITIONS 
transition-property: Defines the CSS properties on which the transition effect should be applied
transition-duration: Sets the time it should take for a transition animation to complete. By default, the value is 0s
transition-timing-function: Sets how intermediate values are calculated for CSS properties that are affected by a transition effect
    - linear: Transitions at a uniform speed
    - ease: Increase speed towards the middle of the transition and slow down again at the end
    - ease-in: Starts slowly, increasing the speed of transition to completion
    - ease-out: Starts transition quickly, slowing as transition continues
    - ease-in-out: Starts transition slowly, accelerates and then slows down again
    - steps( n, <jumpterm>): Displays the transition over "n" stops along the transition, showing each stop for equal periods of time
        - jump-start: Denotes a continuous function on the left, so that the first jump occurs when the transition begins
        - jump-end: Denotes a continuous function to the right, so that the last jump occurs at the end of the animation
        - jump-none: No jump at either end
        - jump-both: Includes pauses at the 0% and 100% marks, effectively adding a step during transition time
transition-delay: Specifies the time to wait between the change of a property and the beginning of a transition effect

Shorthand property: 
transition: property duration timing-function delay
*/

.transition .box {
	background-color: indianred;
	transition-property: background-color;
	transition-duration: 500ms;
	transition-timing-function: ease;
	transition-delay: 0.5s;
	transition: border-color 1s linear 1s;
	transition: all 1s ease-in-out 250ms;
}

.transition .box:hover {
	background-color: firebrick;
	border-color: darkorange;
}

.transition .card {
	transition: opacity 1s ease-out, border-color 1s steps(3),
		box-shadow 1.5s linear 2s;
}

.transition .card:hover {
	opacity: 0.75;
	border-color: firebrick;
	box-shadow: 0rem 0rem 1rem 1rem firebrick;
}

.transition .card img {
	transition: object-position 2s ease-in-out 3s;
}

.transition .card img:hover {
	object-position: 100% 50%;
}

/* TRANSFORMATIONS 2D */

.transform-2d img {
	transition: transform 2s ease-in-out;
}

.transform-2d img:hover {
	transform: none; /* Default Value */
	transform: translateX(4rem);
	transform: translateY(4rem);
	transform: translate(4rem, 4rem);
	transform: translate(-10%, -10%);
	transform: scaleX(1.25);
	transform: scaleY(1.25);
	transform: scale(-1, -1);
	transform: rotateX(90deg);
	transform: rotateY(90deg);
	transform: rotateZ(360deg); /* Clockwise */
	transform: rotate(360deg); /* Clockwise */
	transform: skewX(20deg);
	transform: skewY(20deg);
	transform: skew(20deg, 20deg);
	/*
	matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
	https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
	*/
	transform: matrix(1, 2, 2, 1, 20, 10);
	transform: translate(25%, -25%) rotate(225deg) skew(10deg, 10deg)
		scale(-0.5, -0.5);
}

/*
TRANSFORMATIONS 3D
It is necessary to assign a value to the "perspective" property either directly on the element or on the parent element for the 3D effects on the Z axis to work
*/

.transform-3d {
	perspective: 10rem;
}

.transform-3d img {
	transition: transform 2s ease-in-out;
}

.transform-3d img:hover {
	/* transform: perspective(10rem) translateZ(-4rem); */
	transform: translateZ(-4rem);
	transform: translate3d(2rem, 50%, -2rem);
	transform: rotateX(20deg);
	transform: rotateY(-20deg);
	transform: rotate3d(1, 1, 1, 20deg);
	/* 
	https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d 
	transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
	*/
	transform: rotate3d(-1, 2.5, -2, 20deg);
	transform: rotate3d(-1, 2.5, -2, 20deg) translate3d(2rem, 20%, -3rem);
	transform: rotate3d(-1, 2.5, -2, 20deg) translate3d(2rem, 20%, -3rem)
		scale3d(1.5, 1.5, 1.5);
}

/* TRANSFORMATION ORIGIN */

.transform-origin img {
	transition: transform 2s ease-in-out;
	/* transform-origin: x y z; */
	transform-origin: 50% 50% 0;
	transform-origin: 0 0;
	transform-origin: top right;
	transform-origin: 2rem 2rem;
	transform-origin: 2rem 50%;
}

.transform-origin img:hover {
	transform: rotate(360deg);
}

/* FLIP CARD */

.flip-card {
	margin: 2rem auto;
	border: thin solid #bda350;
	border-radius: 12px;
	width: 250px;
	height: 350px;
	position: relative;
	cursor: pointer;
	transition: transform 1s ease-in-out;
	perspective: 10rem;
	transform-style: preserve-3d;
}

.flip-card:hover {
	transform: rotateY(180deg);
}

.flip-card img {
	width: 100%;
	height: 100%;
	object-fit: cover;
	object-position: 0 50%;
}

.flip-face {
	position: absolute;
	width: 100%;
	height: 100%;
	backface-visibility: hidden;
}

.flip-front {
	transform: rotateY(0deg);
}

.flip-back {
	transform: rotateY(180deg);
}

/* 
ANIMATION
Shorthand property: 
animation: name duration timing-function delay iteration-count direction fill-mode;
*/

@keyframes myAnimation {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

.my-animation {
	animation: myAnimation;
	animation-duration: 2s;
	/* https://cubic-bezier.com/ */
	animation-timing-function: cubic-bezier(1, 0, 0, 1);
	animation-timing-function: ease-in-out;
	animation-delay: 250ms;
	animation-iteration-count: infinite;
	animation-direction: alternate;
	/* At the end of the animation you are left with the final styles of the animation */
	animation-fill-mode: forwards;
	/* At the beginning of the animation, the initial styles of the animation remain */
	animation-fill-mode: backwards;
	/* both apply forwards and backwards values at the same time */
	animation-fill-mode: both;
	animation-play-state: paused; /* CSS deprecated function. Animation control via JavaScript */
	animation-play-state: running; /* Deafult Value */
	animation: myAnimation 2s ease 250ms infinite alternate both;
}

/* TIMELINE & FRAMES */

@keyframes myFrame {
	0% {
		opacity: 0;
		transform: translateX(0%);
	}
	50% {
		opacity: 0.5;
		transform: translateX(-50%);
	}
	75% {
		transform: translateX(-75%);
	}
	100% {
		opacity: 1;
		transform: translateX(100%);
	}
}

.my-frame {
	animation: myFrame 2s infinite;
}
